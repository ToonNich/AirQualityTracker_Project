import pymysql
import pandas as pd
from statsmodels.tsa.statespace.sarimax import SARIMAX
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import adfuller
import schedule
import time

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô PM2.5
def forecast_pm25():
    print("üìä Running PM2.5 Forecast...")

    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL
    conn = pymysql.connect(
        host='localhost',
        user='root',
        password='',
        database='iot_class'
    )

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á data_imt_copy
    query = "SELECT time, PM2_5 FROM air_quality_tracker ORDER BY time ASC"
    df = pd.read_sql(query, conn)
    conn.close()

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå time ‡πÄ‡∏õ‡πá‡∏ô datetime ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô index
    df['time'] = pd.to_datetime(df['time'])
    df.set_index('time', inplace=True)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô Stationary ‡∏î‡πâ‡∏ß‡∏¢ ADF Test
    result = adfuller(df['PM2_5'])
    print(f"ADF Statistic: {result[0]}")
    print(f"P-Value: {result[1]}")

    # ‡∏ñ‡πâ‡∏≤ p-value > 0.05 ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô stationary -> ‡∏ó‡∏≥ Differencing
    if result[1] > 0.05:
        df['PM2_5'] = df['PM2_5'].diff().dropna()

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• SARIMA (p=1, d=1, q=1)(P=1, D=1, Q=1, m=24)
    model = SARIMAX(df['PM2_5'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 24))
    model_fit = model.fit()

    # ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡πà‡∏≤ PM2.5 ‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
    forecast = model_fit.forecast(steps=6).round(2)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
    forecast_times = pd.date_range(start=df.index[-1] + pd.Timedelta(hours=1), periods=6, freq="H")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    forecast_df = pd.DataFrame({
        'Timestamp': forecast_times,
        'Forecasted PM2.5': forecast
    })

    print(forecast_df)

    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
    conn = pymysql.connect(
        host='localhost',
        user='root',
        password='',
        database='iot_class'
    )
    cursor = conn.cursor()

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á data_predict
    for index, row in forecast_df.iterrows():
        timestamp = row['Timestamp']
        pm25_value = row['Forecasted PM2.5']
        sql = "INSERT INTO data_predict (Time, Pm25) VALUES (%s, %s)"
        cursor.execute(sql, (timestamp, pm25_value))

    conn.commit()
    conn.close()
    print("‚úÖ Forecast saved to database.")

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡πÜ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏áschedule.every(1).hours.do(forecast_pm25)
schedule.every(5).seconds.do(forecast_pm25)


print("‚è≥ Waiting for next execution...")
while True:
    schedule.run_pending()
    time.sleep(60)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡πÜ 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

# Run : python forecast_pm25.py
